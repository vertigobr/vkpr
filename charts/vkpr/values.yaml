# Default values for vkpr.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# subchart defaults
ingress-nginx:
  enabled: true
  controller:
    electionID: vkpr-ingress-controller-leader
    publishService:
      enabled: true
    autoscaling:
      enabled: false

# old chart (former stable repo)
# nginx-ingress:
#   enabled: true
#   controller:
#     electionID: vkpr-ingress-controller-leader

external-dns:
  enabled: false
  txtPrefix: vkpr

cert-manager:
  enabled: false
  installCRDs: false

graylog:
  enabled: false

keycloak:
  enabled: false
  # postgresql - enables subchart
  # keep disabled to use external database (like RDS) - this is the recommended option
  # https://artifacthub.io/packages/helm/codecentric/keycloak
  # Keycloak will fallback to H2 local file-based DB if no `DB_VENDOR` is informed
  # H2 located at "/opt/jboss/keycloak/standalone/data"
  # Mounting it into a PVC can be done, but it should only be ok for single instance.
  postgresql:
    enabled: false

vault:
  enabled: false

loki-stack:
  enabled: false

jaeger:
  enabled: false

kube-prometheus-stack:
  enabled: false
  prometheusOperator:
    createCustomResource: false

# prometheus-operator:
#   enabled: true
#   prometheusOperator:
#     createCustomResource: false

# dados para o CRD do ACME
acme:
  email: someone@example.com
  # Add a single challenge solver, HTTP01 using nginx
  solvers:
  - http01:
      ingress:
        class: nginx
  # - http01:
  #     ingress:
  #       class: kong

#
# auto-generated entries below
#
replicaCount: 1

image:
  repository: containous/whoami
  pullPolicy: IfNotPresent

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: whoami.local
      paths: []
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

# BACKUP STACK
velero:
  enabled: false
  # image:
  #   repository: velero/velero
  #   tag: v1.2.0
  #   pullPolicy: IfNotPresent
  # Annotations to add to the Velero deployment's pod template. Optional.
  #
  # If using kube2iam or kiam, use the following annotation with your AWS_ACCOUNT_ID
  # and VELERO_ROLE_NAME filled in:
  #  iam.amazonaws.com/role: arn:aws:iam::<AWS_ACCOUNT_ID>:role/<VELERO_ROLE_NAME>
  podAnnotations: {}
  # Resource requests/limits to specify for the Velero deployment. Optional.
  resources: {}
  # Init containers to add to the Velero deployment's pod spec. At least one plugin provider image is required.
  initContainers:
    - name: velero-plugin-for-aws
      image: velero/velero-plugin-for-aws:v1.0.0
      imagePullPolicy: IfNotPresent
      volumeMounts:
        - mountPath: /target
          name: plugins
  # SecurityContext to use for the Velero deployment. Optional.
  # Set fsGroup for `AWS IAM Roles for Service Accounts`
  # see more informations at: https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html
  securityContext: {}
    # fsGroup: 1337
  # Tolerations to use for the Velero deployment. Optional.
  tolerations: []

  # Node selector to use for the Velero deployment. Optional.
  nodeSelector: {}

  # Extra volumes for the Velero deployment. Optional.
  extraVolumes: []

  # Extra volumeMounts for the Velero deployment. Optional.
  extraVolumeMounts: []

  # Settings for Velero's prometheus metrics. Enabled by default.
  metrics:
    enabled: true
    scrapeInterval: 30s
    # Pod annotations for Prometheus
    podAnnotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "8085"
      prometheus.io/path: "/metrics"
    serviceMonitor:
      enabled: true
      additionalLabels: {}
  # Install CRDs as a templates. Enabled by default.
  installCRDs: false

  ##
  ## End of deployment-related settings.
  ##


  ##
  ## Parameters for the `default` BackupStorageLocation and VolumeSnapshotLocation,
  ## and additional server settings.
  ##
  configuration:
    # Cloud provider being used (e.g. aws, azure, gcp).
    provider: aws
    # Parameters for the `default` BackupStorageLocation. See
    # https://velero.io/docs/v1.0.0/api-types/backupstoragelocation/
    backupStorageLocation:
      # Cloud provider where backups should be stored. Usually should
      # match `configuration.provider`. Required.
      name: aws
      # Bucket to store backups in. Required.
      bucket: <BUCKET>
      # Prefix within bucket under which to store backups. Optional.
      prefix:
      # Additional provider-specific configuration. See link above
      # for details of required/optional fields for your provider.
      config:
        region: <REGION>
      # s3ForcePathStyle:
      # s3Url:
      # kmsKeyId:
      # resourceGroup:
      # The ID of the subscription containing the storage account, if different from the cluster’s subscription. (Azure only)
      # subscriptionId:
      # storageAccount:
      # publicUrl:
      # Name of the GCP service account to use for this backup storage location. Specify the
      # service account here if you want to use workload identity instead of providing the key file.(GCP only)
      # serviceAccount:

    # Parameters for the `default` VolumeSnapshotLocation. See
    # https://velero.io/docs/v1.0.0/api-types/volumesnapshotlocation/
    volumeSnapshotLocation:
      # Cloud provider where volume snapshots are being taken. Usually
      # should match `configuration.provider`. Required.,
      name: aws
      # Additional provider-specific configuration. See link above
      # for details of required/optional fields for your provider.
      config:
        region: <REGION>
    #    apitimeout:
    #    resourceGroup:
    #    The ID of the subscription where volume snapshots should be stored, if different from the cluster’s subscription. If specified, also requires `configuration.volumeSnapshotLocation.config.resourceGroup`to be set. (Azure only)
    #    subscriptionId:
    #    snapshotLocation:
    #    project:

    # These are server-level settings passed as CLI flags to the `velero server` command. Velero
    # uses default values if they're not passed in, so they only need to be explicitly specified
    # here if using a non-default value. The `velero server` default values are shown in the
    # comments below.
    # --------------------
    # `velero server` default: 1m
    backupSyncPeriod:
    # `velero server` default: 1h
    resticTimeout:
    # `velero server` default: namespaces,persistentvolumes,persistentvolumeclaims,secrets,configmaps,serviceaccounts,limitranges,pods
    restoreResourcePriorities:
    # `velero server` default: false
    restoreOnlyMode:

    # additional key/value pairs to be used as environment variables such as "AWS_CLUSTER_NAME: 'yourcluster.domain.tld'"
    extraEnvVars: {}

    # Set log-level for Velero pod. Default: info. Other options: debug, warning, error, fatal, panic.
    logLevel:

    # Set log-format for Velero pod. Default: text. Other option: json.
    logFormat:

  ##
  ## End of backup/snapshot location settings.
  ##


  ##
  ## Settings for additional Velero resources.
  ##

  rbac:
    # Whether to create the Velero role and role binding to give all permissions to the namespace to Velero.
    create: true
    # Whether to create the cluster role binding to give administrator permissions to Velero
    clusterAdministrator: true

  # Information about the Kubernetes service account Velero uses.
  serviceAccount:
    server:
      create: true
      name:
      annotations:

  # Info about the secret to be used by the Velero deployment, which
  # should contain credentials for the cloud provider IAM account you've
  # set up for Velero.
  credentials:
    # Whether a secret should be used as the source of IAM account
    # credentials. Set to false if, for example, using kube2iam or
    # kiam to provide IAM credentials for the Velero pod.
    useSecret: true
    # Name of a pre-existing secret (if any) in the Velero namespace
    # that should be used to get IAM account credentials. Optional.
    existingSecret:
    # Data to be stored in the Velero secret, if `useSecret` is
    # true and `existingSecret` is empty. This should be the contents
    # of your IAM credentials file.
    secretContents:
      cloud: |
        [default]
        aws_access_key_id=<ACCESS_KEY_ID>
        aws_secret_access_key=<SECRET_KEY_ID>
  # Whether to create backupstoragelocation crd, if false => do not create a default backup location
  backupsEnabled: true
  # Whether to create volumesnapshotlocation crd, if false => disable snapshot feature
  snapshotsEnabled: true

  # Whether to deploy the restic daemonset.
  deployRestic: false

  restic:
    podVolumePath: /var/lib/kubelet/pods
    privileged: false
    # Pod priority class name to use for the Restic daemonset. Optional.
    priorityClassName: {}
    # Resource requests/limits to specify for the Restic daemonset deployment. Optional.
    resources: {}
    # Tolerations to use for the Restic daemonset. Optional.
    tolerations: []

    # Extra volumes for the Restic daemonset. Optional.
    extraVolumes: []

    # Extra volumeMounts for the Restic daemonset. Optional.
    extraVolumeMounts: []

    # SecurityContext to use for the Velero deployment. Optional.
    # Set fsGroup for `AWS IAM Roles for Service Accounts`
    # see more informations at: https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html
    securityContext: {}
      # fsGroup: 1337

  # Backup schedules to create.
  # Eg:
  # schedules:
  #   mybackup:
  #     schedule: "0 0 * * *"
  #     template:
  #       ttl: "240h"
  #       includedNamespaces:
  #        - foo
  #   | Character Position | Character Period | Acceptable Values |
  # | -------------------|:----------------:| -----------------:|
  # | 1                  | Minute           | 0-59,*            |
  # | 2                  | Hour             | 0-23,*            |
  # | 3                  | Day of Month     | 1-31,*            |
  # | 4                  | Month            | 1-12,*            |
  # | 5                  | Day of Week      | 0-7,*             |
  schedules: {}

  # Velero ConfigMaps.
  # Eg:
  # configMaps:
  #   restic-restore-action-config:
  #     labels:
  #       velero.io/plugin-config: ""
  #       velero.io/restic: RestoreItemAction
  #     data:
  #       image: velero/velero-restic-restore-helper:v1.3.1
  configMaps: {}
